<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Demo.Core.Api.WebApi</name>
    </assembly>
    <members>
        <member name="T:Demo.Core.Api.WebApi.AOP.BlogCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AOP.BlogRedisCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AOP.CacheAOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AOP.CacheAOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AOP.CacheAOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Api.WebApi.App_Start.ApiErrorHandleFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.App_Start.ApiErrorHandleFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Demo.Core.Api.WebApi.App_Start.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.App_Start.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AuthHelper.OverWrite.JwtHelper.IssueJwt(Demo.Core.Api.WebApi.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel">令牌</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AuthHelper.OverWrite.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AuthHelper.Policys.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AuthHelper.Policys.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionHandler.RoleModulePermissionServices">
            <summary>
            services 层注入
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Demo.Core.Api.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionItem">
            <summary>
            用户或角色或其他凭据实体
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{Demo.Core.Api.WebApi.AuthHelper.Policys.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:Demo.Core.Api.WebApi.AutoMapper.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.#ctor(Demo.Core.Api.IServices.IBlogArticleService,Demo.Core.Api.Data.IRedisCacheManager)">
            <summary>
            构造函数
            </summary>
            <param name="blogArticleService"></param>
            <param name="redisCacheManager"></param>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.Get(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            获取博客列表【无权限】
            </summary>
            <param name="id"></param>
            <param name="page"></param>
            <param name="category"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.GetBlogs">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.Get(System.Int32,System.Int32)">
            <summary>
            Sum接口
            </summary>
            <param name="i">参数i</param>
            <param name="j">参数j</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.Get(System.Int32)">
            <summary>
            获取详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.DetailNuxtNoPer(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.BlogController.V2_Blogtest">
            <summary>
            获取博客测试信息 v2版本
            </summary>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Api.WebApi.Controllers.LoginController">
            <summary>
            登陆管理
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取令牌
            </summary>
            <param name="name">用户名</param>
            <param name="pass">密码</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="T:Demo.Core.Api.WebApi.Controllers.UserController">
            <summary>
            用户管理Api
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.UserController.Get(System.Int64)">
            <summary>
            获取单个用户根据主键Id
            </summary>
            <param name="id">主键Id</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.UserController.Put(Demo.Core.Api.Model.Entity.UserModel)">
            <summary>
            修改用户信息
            </summary>
            <param name="req">用户信息</param>
        </member>
        <member name="M:Demo.Core.Api.WebApi.Controllers.UserController.Delete(System.Int64)">
            <summary>
            删除用户信息根据主键Id
            </summary>
            <param name="id">主键Id</param>
            <returns></returns>
        </member>
        <member name="P:Demo.Core.Api.WebApi.Startup.Repository">
            <summary>
            log4net 仓储库
            </summary>
        </member>
        <member name="T:Demo.Core.Api.WebApi.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:Demo.Core.Api.WebApi.SwaggerHelper.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:Demo.Core.Api.WebApi.SwaggerHelper.CustomApiVersion.ApiVersions.v1">
            <summary>
            v1 版本
            </summary>
        </member>
        <member name="F:Demo.Core.Api.WebApi.SwaggerHelper.CustomApiVersion.ApiVersions.v2">
            <summary>
            v2 版本
            </summary>
        </member>
        <member name="T:Demo.Core.Api.WebApi.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:Demo.Core.Api.WebApi.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:Demo.Core.Api.WebApi.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Demo.Core.Api.WebApi.SwaggerHelper.CustomRouteAttribute.#ctor(Demo.Core.Api.WebApi.SwaggerHelper.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
    </members>
</doc>
